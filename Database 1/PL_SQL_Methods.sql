/* (PROCEDIMIENTO) Incrementar el salario de un profesor un 10%, introduciendo el número del profesor como parámetro de entrada */
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE SUBIDA_PRO(V_NUMPRO IN PROFESORES.NUMPRO%TYPE)
IS
BEGIN
    UPDATE PROFESORES SET SALPRO = SALPRO * 1.10 WHERE NUMPRO = V_NUMPRO;
    DBMS_OUTPUT.PUT_LINE(chr(10) || 'SALARIO DEL PROFESOR DE CÓDIGO ' || V_NUMPRO || ' ACTUALIZADO');
END SUBIDA_PRO;

/* (PROCEDIMIENTO) Visualizar el salario y la especialidad de un profesor, introduciendo el número del profesor como parámetro de entrada */
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE VISUALIZAR_PROF
(V_NUMPRO IN PROFESORES.NUMPRO%TYPE, 
V_SALPRO OUT PROFESORES.SALPRO%TYPE,
V_ESPPRO OUT PROFESORES.ESPPRO%TYPE)
IS
BEGIN
    SELECT SALPRO, ESPPRO INTO V_SALPRO, V_ESPPRO FROM PROFESORES WHERE NUMPRO = V_NUMPRO;
    DBMS_OUTPUT.PUT_LINE(chr(10) || 'SALARIO: ' || V_SALPRO || ' / ESPECIALIDAD: ' || V_ESPPRO);
END VISUALIZAR_PROF;

/* (PROCEDIMIENTO) Introducir una cadena y que la devuelva entre paréntesis */
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE ANIADIR_PARENTESIS(V_CAM IN OUT VARCHAR2)
IS
BEGIN
    V_CAM := '(' || V_CAM || ')';
END ANIADIR_PARENTESIS;

/* (PROCEDIMIENTO) Introducir un elemento en la tabla TIPOS_SALARIO */
SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE ANIADIR_TIPO_SALARIO
(V_TIPOSAL TIPOS_SALARIO.TIPOSAL%TYPE,
V_INFERIOR TIPOS_SALARIO.INFERIOR%TYPE,
V_SUPERIOR TIPOS_SALARIO.SUPERIOR%TYPE)
IS
BEGIN
    INSERT INTO TIPOS_SALARIO VALUES(V_TIPOSAL, V_INFERIOR, V_SUPERIOR);
    DBMS_OUTPUT.PUT_LINE(chr(10) || 'REGISTRO INSERTADO CORRECTAMENTE EN LA TABLA "TIPOS_SALARIO"');
END ANIADIR_TIPO_SALARIO;

/* Ver los procedimientos existentes en la base de datos */
SELECT OBJECT_NAME, OBJECT_TYPE, STATUS FROM USER_OBJECTS WHERE OBJECT_TYPE = 'PROCEDURE';

/* Ver un procedimiento creado */
SELECT OBJECT_NAME, OBJECT_TYPE, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'ANIADIR_PARENTESIS';

/* Ver el código fuente un procedimiento creado */
SELECT TEXT FROM USER_SOURCE WHERE NAME = 'ANIADIR_PARENTESIS' AND TYPE = 'PROCEDURE' ORDER BY LINE;

/* (FUNCIÓN) Devolver el salario de un profesor, introduciendo el número del profesor como parámetro de entrada */
SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION SALARIO_PROFESOR(V_NUMPRO PROFESORES.NUMPRO%TYPE)
RETURN NUMBER
IS
    V_SALPRO PROFESORES.SALPRO%TYPE := 0;
BEGIN
    SELECT SALPRO INTO V_SALPRO FROM PROFESORES WHERE NUMPRO = V_NUMPRO;
    RETURN V_SALPRO;
END SALARIO_PROFESOR;    

/* (FUNCIÓN) Devolver el número de años entre dos fechas, introduciendo las dos fechas como parámetros de entrada */
CREATE OR REPLACE FUNCTION ANIOS_FECHAS(FECHA1 DATE, FECHA2 DATE)
RETURN NUMBER
AS
    V_ANIOS NUMBER(6);
BEGIN
    V_ANIOS := ABS(TRUNC(MONTHS_BETWEEN(FECHA1, FECHA2) / 12));
    RETURN V_ANIOS;
END ANIOS_FECHAS;

/* (FUNCIÓN) Calcular el factorial de un número, introduciendo este como parámetro de entrada */
CREATE OR REPLACE FUNCTION FACTORIAL_RECURSIVA(N NUMBER)
RETURN NUMBER
IS
BEGIN
    IF N = 0 THEN
        RETURN 1;
    ELSE
        RETURN N * FACTORIAL_RECURSIVA(N - 1);
    END IF;
END FACTORIAL_RECURSIVA;     

/* Ver las funciones existentes en la base de datos */
SELECT OBJECT_NAME, OBJECT_TYPE, STATUS FROM USER_OBJECTS WHERE OBJECT_TYPE = 'FUNCTION';

/* Ver una función creada */
SELECT OBJECT_NAME, OBJECT_TYPE, STATUS FROM USER_OBJECTS WHERE OBJECT_NAME = 'ANIOS_FECHAS';

/* Ver el código fuente de una función creada */
SELECT TEXT FROM USER_SOURCE WHERE NAME = 'ANIOS_FECHAS' AND TYPE = 'FUNCTION' ORDER BY LINE;
/* Crear un paquete con los siguientes subprogramas:
    1. Insertar un nuevo curso, introduciendo los atributos de la tabla. Controlar como excepción si se repitiera el número del curso
    2. Modificar la fecha de inicio, introduciendo el número del curso y la nueva fecha de inicio como parámetros de entrada
    3. Modificar la fecha final, introduciendo el número del curso y la nueva fecha de finalización como parámetros de entrada
    4. Aumentar precio un 10% de los cursos que imparte un profesor, introduciendo el nombre del profesor como parámetro de entrada.
    5. Visualizar los datos del curso, introduciendo el número del curso como parámetro de entrada
    6. Visualizar los datos del curso, introduciendo el nombre del curso como parámetro de entrada
    7. Visualizar los cursos que tienen más créditos
    8. Borrar un curso, introduciendo el número del curso como parámetro de entrada. Controlar como excepción si no existiera el curso
    9. (FUNCIÓN INTERNA) Buscar un curso por el nombre, introduciendo el nombre del curso como parámetro de entrada */
    
CREATE OR REPLACE PACKAGE GEST_CURSO AS
    
    PROCEDURE INSERTAR_CURSO
    (V_NUMCUR CURSOS.NUMCUR%TYPE,
    V_TITCUR CURSOS.TITCUR%TYPE,
    V_PRECUR CURSOS.PRECUR%TYPE,
    V_EDICUR CURSOS.EDICUR%TYPE,
    V_HORCUR CURSOS.HORCUR%TYPE,
    V_FINCUR CURSOS.FINCUR%TYPE,
    V_FFICUR CURSOS.FFICUR%TYPE,
    V_CRECUR CURSOS.CRECUR%TYPE,
    V_NUMPRO CURSOS.NUMPRO%TYPE);
    PROCEDURE MODIFICAR_FECHAINI_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE, V_FECHAINI CURSOS.FINCUR%TYPE);
    PROCEDURE MODIFICAR_FECHAFIN_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE, V_FECHAFIN CURSOS.FINCUR%TYPE);
    PROCEDURE AUMENTAR_PRECIO_CURSO(NUMPROFE CURSOS.NUMPRO%TYPE);
    PROCEDURE VISUALIZAR_DATOS_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE);
    PROCEDURE VISUALIZAR_DATOS_CURSO(V_TITULO_CURSO CURSOS.TITCUR%TYPE);
    PROCEDURE MAX_CREDITOS_CURSO;
    PROCEDURE BORRAR_CURSO(COD_CURSO NUMBER);
    
END GEST_CURSO;

------------------------------------

CREATE OR REPLACE PACKAGE BODY GEST_CURSO AS
    FUNCTION BUSCAR_CURSO_POR_TITULO(N_CURSO VARCHAR2)
    RETURN NUMBER;

------------
    
    PROCEDURE INSERTAR_CURSO
    (V_NUMCUR CURSOS.NUMCUR%TYPE,
    V_TITCUR CURSOS.TITCUR%TYPE,
    V_PRECUR CURSOS.PRECUR%TYPE,
    V_EDICUR CURSOS.EDICUR%TYPE,
    V_HORCUR CURSOS.HORCUR%TYPE,
    V_FINCUR CURSOS.FINCUR%TYPE,
    V_FFICUR CURSOS.FFICUR%TYPE,
    V_CRECUR CURSOS.CRECUR%TYPE,
    V_NUMPRO CURSOS.NUMPRO%TYPE)
    IS
    BEGIN
        INSERT INTO CURSOS VALUES(V_NUMCUR, V_TITCUR, V_PRECUR, V_EDICUR, V_HORCUR, V_FINCUR, V_FFICUR, V_CRECUR, V_NUMPRO);
        DBMS_OUTPUT.PUT_LINE('SE HA INSERTADO EL CURSO ' || V_NUMCUR || ' DE TÍTULO ' || V_TITCUR);
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
                DBMS_OUTPUT.PUT_LINE('ERROR. NÚMERO DE CURSO DUPLICADO');
    END INSERTAR_CURSO;

------------
    
    PROCEDURE MODIFICAR_FECHAINI_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE, V_FECHAINI CURSOS.FINCUR%TYPE)
    IS
    BEGIN
        UPDATE CURSOS SET FINCUR = V_FECHAINI WHERE NUMCUR = V_NUM_CURSO;
        DBMS_OUTPUT.PUT_LINE('SE HA MODIFICADO LA FECHA DE INICIO DEL CURSO ' || V_NUM_CURSO);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('EL CURSO NO EXISTE Y NO SE HA PODIDO MODIFICAR');
    END MODIFICAR_FECHAINI_CURSO;

------------
    
    PROCEDURE MODIFICAR_FECHAFIN_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE, V_FECHAFIN CURSOS.FINCUR%TYPE)
    IS
    BEGIN
        UPDATE CURSOS SET FFICUR = V_FECHAFIN WHERE NUMCUR = V_NUM_CURSO;
        DBMS_OUTPUT.PUT_LINE('SE HA MODIFICADO LA FECHA DE FINAL DEL CURSO ' || V_NUM_CURSO);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('EL CURSO NO EXISTE Y NO SE HA PODIDO MODIFICAR');
    END MODIFICAR_FECHAFIN_CURSO;

------------

    PROCEDURE AUMENTAR_PRECIO_CURSO(NUMPROFE CURSOS.NUMPRO%TYPE)
    IS
        CURSOR C1 IS 
            SELECT NUMPRO, TITCUR, PRECUR FROM CURSOS WHERE NUMPRO=NUMPROFE FOR UPDATE;
        REG C1%ROWTYPE;
    BEGIN
        OPEN C1;
        FETCH C1 INTO REG;
        WHILE C1%FOUND LOOP
            UPDATE CURSOS SET PRECUR = PRECUR * 1.10 WHERE CURRENT OF C1;
            FETCH C1 INTO REG;   
        END LOOP;
        CLOSE C1;    
    END AUMENTAR_PRECIO_CURSO;

------------
    
    PROCEDURE VISUALIZAR_DATOS_CURSO(V_NUM_CURSO CURSOS.NUMCUR%TYPE)
    IS
        REG_CURSO CURSOS%ROWTYPE;
    BEGIN
        SELECT * INTO REG_CURSO FROM CURSOS WHERE NUMCUR = V_NUM_CURSO;
        DBMS_OUTPUT.PUT_LINE('NÚMERO: ' || REG_CURSO.NUMCUR);
        DBMS_OUTPUT.PUT_LINE('TÍTULO: ' || REG_CURSO.TITCUR);
        DBMS_OUTPUT.PUT_LINE('PRECIO: ' || REG_CURSO.PRECUR);
        DBMS_OUTPUT.PUT_LINE('EDICIÓN: ' || REG_CURSO.EDICUR);
        DBMS_OUTPUT.PUT_LINE('HORAS: ' || REG_CURSO.HORCUR);
        DBMS_OUTPUT.PUT_LINE('FECHA DE INICIO: ' || REG_CURSO.FINCUR);
        DBMS_OUTPUT.PUT_LINE('FECHA DE FINAL: ' || REG_CURSO.FFICUR);
        DBMS_OUTPUT.PUT_LINE('CRÉDITOS: ' || REG_CURSO.CRECUR);
        DBMS_OUTPUT.PUT_LINE('NÚMERO PROFESOR: ' || REG_CURSO.NUMPRO);
    END VISUALIZAR_DATOS_CURSO;

------------
    
    PROCEDURE VISUALIZAR_DATOS_CURSO(V_TITULO_CURSO CURSOS.TITCUR%TYPE)
    IS
        V_NUM_CURSO CURSOS.NUMCUR%TYPE;
        REG_CURSO CURSOS%ROWTYPE;
    BEGIN
        V_NUM_CURSO := BUSCAR_CURSO_POR_TITULO(V_TITULO_CURSO);
        SELECT * INTO REG_CURSO FROM CURSOS WHERE NUMCUR = V_NUM_CURSO;
        DBMS_OUTPUT.PUT_LINE('NÚMERO: ' || REG_CURSO.NUMCUR);
        DBMS_OUTPUT.PUT_LINE('TÍTULO: ' || REG_CURSO.TITCUR);
        DBMS_OUTPUT.PUT_LINE('PRECIO: ' || REG_CURSO.PRECUR);
        DBMS_OUTPUT.PUT_LINE('EDICIÓN: ' || REG_CURSO.EDICUR);
        DBMS_OUTPUT.PUT_LINE('HORAS: ' || REG_CURSO.HORCUR);
        DBMS_OUTPUT.PUT_LINE('FECHA DE INICIO: ' || REG_CURSO.FINCUR);
        DBMS_OUTPUT.PUT_LINE('FECHA DE FINAL: ' || REG_CURSO.FFICUR);
        DBMS_OUTPUT.PUT_LINE('CRÉDITOS: ' || REG_CURSO.CRECUR);
        DBMS_OUTPUT.PUT_LINE('NÚMERO PROFESOR: ' || REG_CURSO.NUMPRO);
    END VISUALIZAR_DATOS_CURSO;

------------

    PROCEDURE MAX_CREDITOS_CURSO
    IS
        CURSOR C1 IS
            SELECT TITCUR, CRECUR FROM CURSOS WHERE CRECUR = (SELECT MAX(CRECUR) FROM CURSOS);
        REG C1%ROWTYPE;
    BEGIN
        OPEN C1;
        FETCH C1 INTO REG;
        WHILE C1%FOUND LOOP
            DBMS_OUTPUT.PUT_LINE(REG.TITCUR || 'TIENE: ' || REG.CRECUR );
            FETCH C1 INTO REG;
        END LOOP;
        CLOSE C1;
    END MAX_CREDITOS_CURSO;

------------

    PROCEDURE BORRAR_CURSO(COD_CURSO NUMBER)
    IS
        CONTADOR NUMBER := 0;
        NO_EXISTE_CURSO EXCEPTION;
    BEGIN
        SELECT COUNT(NUMCUR) INTO CONTADOR FROM CURSOS WHERE NUMCUR = COD_CURSO;
        IF(CONTADOR = 0) THEN
            RAISE NO_EXISTE_CURSO;
        ELSE
            DELETE FROM CURSOS WHERE NUMCUR = COD_CURSO;
        END IF;
        EXCEPTION
            WHEN NO_EXISTE_CURSO THEN
                DBMS_OUTPUT.PUT_LINE('ERROR. NO EXISTE DICHO CURSO');
    END BORRAR_CURSO; 

------------

    FUNCTION BUSCAR_CURSO_POR_TITULO(N_CURSO VARCHAR2)
    RETURN NUMBER
    IS
        NUMERO CURSOS.NUMCUR%TYPE;
    BEGIN
        SELECT NUMCUR INTO NUMERO FROM CURSOS WHERE TITCUR = N_CURSO;
        RETURN NUMERO;
    END BUSCAR_CURSO_POR_TITULO;
    
END GEST_CURSO;